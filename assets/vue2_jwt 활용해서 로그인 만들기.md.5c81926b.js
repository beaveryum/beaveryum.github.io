import{_ as a,c as r,a as t,b as o,t as n,d as p,o as s}from"./app.ff46b2ef.js";const w=JSON.parse('{"title":"jwt 활용해서 로그인 만들기","description":"","frontmatter":{"title":"jwt 활용해서 로그인 만들기"},"headers":[{"level":2,"title":"사용법 설명","slug":"사용법-설명","link":"#사용법-설명","children":[]},{"level":2,"title":"참고 자료 :","slug":"참고-자료","link":"#참고-자료","children":[]}],"relativePath":"vue2/jwt 활용해서 로그인 만들기.md","lastUpdated":1674640550000}'),i={name:"vue2/jwt 활용해서 로그인 만들기.md"},_={id:"frontmatter-title",tabindex:"-1"},d=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),l=p('<h2 id="사용법-설명" tabindex="-1">사용법 설명 <a class="header-anchor" href="#사용법-설명" aria-hidden="true">#</a></h2><p>몇가지 설명을 덧붙이자면 여기서 핵심이 네비게이션 가이드쪽이 핵심이라 생각한다 엑시오스 인터셉터도 그 역할을 하지만</p><p>토큰 재발급 하는과정이 네이게이션 가이드를 통해서 재 발급이 된다 이거 때문에 한 일주일 넘도록 고생했다.</p><p>백단은 일단 firebase/jwt 활용했다 여기서 토큰 만료 되는 시간하고 쿠키랑 같아야된다</p><p>억세스 토큰은 5분씩 해줬고 리프레시토큰은 2주정도 했다.</p><p>리프레시 토큰은 디비에 저장 하거나 레디스에 저장하면된다.</p><p>백단 라우트는 로그인, 로그아웃 리프레시토큰, 어덴티케이션 만 있으면 된다.</p><p>설명을 하자면 로그인 메서드에서 억세스와 리프레시토큰이 발급 된다.</p><p>리프레시토큰 메서드는 http 헤더의 리프레시토큰이 존재하면 억세스 발급을 해준다.</p><p>즉 억세스 토큰이 http 401 상태가 되면 리프레시토큰에 의해서 새 발급을 해준다 그것도 5분 간격으로 발급해준다.</p><p>어덴티케이션 메서드는 여기서 토큰을 base64 디코더로 해독해서 이메일을 받아온것을 회원 정보 테이블로 조회해서 가져온다.</p><p>완성 시키면 깃헙에 올릴것이다. 참고하면 된다.</p><h2 id="참고-자료" tabindex="-1">참고 자료 : <a class="header-anchor" href="#참고-자료" aria-hidden="true">#</a></h2><p><a href="https://kdinner.tistory.com/60" target="_blank" rel="noreferrer">https://kdinner.tistory.com/60</a></p><p><a href="https://jasonwatmore.com/post/2018/07/06/vue-vuex-jwt-authentication-tutorial-example" target="_blank" rel="noreferrer">https://jasonwatmore.com/post/2018/07/06/vue-vuex-jwt-authentication-tutorial-example</a></p>',15);function c(e,h,u,m,f,j){return s(),r("div",null,[t("h1",_,[o(n(e.$frontmatter.title)+" ",1),d]),l])}const x=a(i,[["render",c]]);export{w as __pageData,x as default};
